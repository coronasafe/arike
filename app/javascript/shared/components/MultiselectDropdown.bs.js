// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as $$String from "bs-platform/lib/es6/string.js";
import * as Js_math from "bs-platform/lib/es6/js_math.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Belt_SortArray from "bs-platform/lib/es6/belt_SortArray.js";
import * as Caml_exceptions from "bs-platform/lib/es6/caml_exceptions.js";
import * as Webapi__Dom__Element from "bs-webapi/src/Webapi/Dom/Webapi__Dom__Element.bs.js";

((require("./MultiselectDropdown.css")));

function str(prim) {
  return prim;
}

var RootElementMissing = /* @__PURE__ */Caml_exceptions.create("MultiselectDropdown-Arike.DomUtils.RootElementMissing");

function focus(id) {
  var el = document.getElementById(id);
  var tmp;
  if (el == null) {
    throw {
          RE_EXN_ID: RootElementMissing,
          _1: id,
          Error: new Error()
        };
  }
  tmp = el;
  Belt_Option.map(Webapi__Dom__Element.asHtmlElement(tmp), (function (prim) {
          prim.focus();
          
        }));
  
}

var DomUtils = {
  RootElementMissing: RootElementMissing,
  focus: focus
};

function Make(Selectable) {
  var search = function (searchString, selections) {
    return Belt_SortArray.stableSortBy(selections.filter(function (selection) {
                    return $$String.lowercase_ascii(Curry._1(Selectable.searchString, selection)).includes($$String.lowercase_ascii(searchString));
                  }), (function (x, y) {
                  return $$String.compare(Curry._1(Selectable.value, x), Curry._1(Selectable.value, y));
                }));
  };
  var selectionTitle = function (selection) {
    var value = Curry._1(Selectable.value, selection);
    var label = Curry._1(Selectable.label, selection);
    if (label !== undefined) {
      return "Pick " + (label + (": " + value));
    } else {
      return "Pick " + value;
    }
  };
  var tagPillClasses = function (color, showHover) {
    var bgColor200 = "bg-" + (color + "-200 ");
    var bgColor300 = "bg-" + (color + "-300 ");
    var textColor800 = "text-" + (color + "-800 ");
    var textColor900 = "text-" + (color + "-900 ");
    return "rounded text-xs overflow-hidden " + (bgColor200 + (textColor800 + (
                showHover ? "px-2 py-px hover:" + (bgColor300 + ("hover:" + textColor900)) : "inline-flex"
              )));
  };
  var applyFilter = function (selection, onSelect, id, $$event) {
    $$event.preventDefault();
    Curry._1(onSelect, selection);
    return focus(id);
  };
  var showOptions = function (options, onSelect, id, labelSuffix) {
    return $$Array.mapi((function (index, selection) {
                  var label = Curry._1(Selectable.label, selection);
                  return React.createElement("button", {
                              key: String(index),
                              className: "flex text-xs px-4 py-1 items-center w-full hover:bg-gray-200 focus:outline-none focus:bg-gray-200",
                              title: selectionTitle(selection),
                              onClick: (function (param) {
                                  return applyFilter(selection, onSelect, id, param);
                                })
                            }, label !== undefined ? React.createElement("span", {
                                    className: "mr-2 flex-shrink-0 md:w-1/6 text-right"
                                  }, label + labelSuffix) : null, React.createElement("span", {
                                  className: tagPillClasses(Curry._1(Selectable.color, selection), true)
                                }, Curry._1(Selectable.value, selection)));
                }), options);
  };
  var searchResult = function (searchInput, unselected, labelSuffix, id, onSelect) {
    var normalizedString = searchInput.trim().replace(new RegExp("\\s+", "g"), " ");
    var options = normalizedString === "" ? [] : search(normalizedString, unselected);
    return showOptions(options, onSelect, id, labelSuffix);
  };
  var removeSelection = function (onDeselect, selection, $$event) {
    $$event.preventDefault();
    return Curry._1(onDeselect, selection);
  };
  var showSelected = function (onDeselect, labelSuffix, selected) {
    return $$Array.mapi((function (index, selection) {
                  var value = Curry._1(Selectable.value, selection);
                  var label = Curry._1(Selectable.label, selection);
                  return React.createElement("div", {
                              key: String(index),
                              className: "inline-flex py-1 mr-2"
                            }, React.createElement("div", {
                                  className: tagPillClasses(Curry._1(Selectable.color, selection), false)
                                }, React.createElement("span", {
                                      className: "pl-2 py-px"
                                    }, label !== undefined ? label + (labelSuffix + value) : value), React.createElement("button", {
                                      className: "ml-1 text-red-700 px-2 py-px focus:outline-none hover:bg-red-400 hover:text-white flex items-center",
                                      title: "Remove selection: " + value,
                                      onClick: (function (param) {
                                          return removeSelection(onDeselect, selection, param);
                                        })
                                    }, "x")));
                }), selected);
  };
  var onWindowClick = function (showDropdown, setShowDropdown, _event) {
    if (showDropdown) {
      return Curry._1(setShowDropdown, (function (param) {
                    return false;
                  }));
    }
    
  };
  var toggleDropdown = function (setShowDropdown, $$event) {
    $$event.stopPropagation();
    return Curry._1(setShowDropdown, (function (showDropdown) {
                  return !showDropdown;
                }));
  };
  var wrapper = function (children) {
    return React.createElement("div", {
                className: "multiselect-dropdown__search-dropdown w-full absolute border border-gray-400 bg-white mt-1 rounded-lg shadow-lg py-2 z-50"
              }, React.createElement("p", {
                    className: "text-gray-700 italic mx-4 text-xs border-b pb-1 mb-2"
                  }, "Suggestions:"), children);
  };
  var showHint = function (hint) {
    return React.createElement("p", {
                className: "font-normal text-xs px-4 py-2 -mb-2 rounded-b-lg bg-gray-100 mt-2 text-left border-t"
              }, hint);
  };
  var MultiselectDropdown$Make = function (Props) {
    var id = Props.id;
    var placeholderOpt = Props.placeholder;
    var onChange = Props.onChange;
    var value = Props.value;
    var unselected = Props.unselected;
    var selected = Props.selected;
    var onSelect = Props.onSelect;
    var onDeselect = Props.onDeselect;
    var labelSuffixOpt = Props.labelSuffix;
    var emptyMessageOpt = Props.emptyMessage;
    var hint = Props.hint;
    var defaultOptionsOpt = Props.defaultOptions;
    var placeholder = placeholderOpt !== undefined ? placeholderOpt : "Search";
    var labelSuffix = labelSuffixOpt !== undefined ? labelSuffixOpt : ": ";
    var emptyMessage = emptyMessageOpt !== undefined ? emptyMessageOpt : "No results found";
    var defaultOptions = defaultOptionsOpt !== undefined ? defaultOptionsOpt : [];
    var match = React.useState(function () {
          if (id !== undefined) {
            return id;
          } else {
            return "re-multiselect-" + (Date.now().toString() + ("-" + String(Js_math.random_int(100000, 999999))));
          }
        });
    var inputId = match[0];
    var match$1 = React.useState(function () {
          return false;
        });
    var setShowDropdown = match$1[1];
    var showDropdown = match$1[0];
    React.useEffect((function () {
            var curriedFunction = function (param) {
              return onWindowClick(showDropdown, setShowDropdown, param);
            };
            var removeEventListener = function (param) {
              window.removeEventListener("click", curriedFunction);
              
            };
            if (showDropdown) {
              window.addEventListener("click", curriedFunction);
              return removeEventListener;
            } else {
              removeEventListener(undefined);
              return ;
            }
          }), [showDropdown]);
    var results = searchResult(value, unselected, labelSuffix, inputId, onSelect);
    var tmp;
    tmp = showDropdown ? (
        results.length !== 0 ? wrapper(results) : (
            defaultOptions.length !== 0 ? (
                hint !== undefined ? wrapper(React.createElement("div", undefined, showOptions(defaultOptions, onSelect, inputId, labelSuffix), showHint(hint))) : wrapper(showOptions(defaultOptions, onSelect, inputId, labelSuffix))
              ) : (
                hint !== undefined ? wrapper(showHint(hint)) : (
                    value === "" ? null : wrapper(emptyMessage)
                  )
              )
          )
      ) : (
        value === "" ? null : (
            results.length !== 0 ? wrapper(results) : wrapper(emptyMessage)
          )
      );
    return React.createElement("div", {
                className: "w-full relative"
              }, React.createElement("div", undefined, React.createElement("div", {
                        className: "flex flex-wrap items-center text-sm bg-white border border-gray-400 rounded w-full py-1 px-3 mt-1 focus:outline-none focus:bg-white focus:border-primary-300"
                      }, showSelected(onDeselect, labelSuffix, selected), React.createElement("input", {
                            className: "flex-grow appearance-none bg-transparent border-none text-gray-700 mr-3 py-1 leading-snug focus:outline-none",
                            id: inputId,
                            autoComplete: "off",
                            placeholder: placeholder,
                            type: "search",
                            value: value,
                            onChange: (function (e) {
                                return Curry._1(onChange, e.target.value);
                              }),
                            onClick: (function (param) {
                                return Curry._1(setShowDropdown, (function (s) {
                                              return !s;
                                            }));
                              })
                          }))), React.createElement("div", undefined), tmp);
  };
  return {
          search: search,
          selectionTitle: selectionTitle,
          tagPillClasses: tagPillClasses,
          applyFilter: applyFilter,
          showOptions: showOptions,
          searchResult: searchResult,
          removeSelection: removeSelection,
          showSelected: showSelected,
          onWindowClick: onWindowClick,
          toggleDropdown: toggleDropdown,
          wrapper: wrapper,
          showHint: showHint,
          make: MultiselectDropdown$Make
        };
}

export {
  str ,
  DomUtils ,
  Make ,
  
}
/*  Not a pure module */
