// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as MultiselectDropdown$Arike from "../shared/components/MultiselectDropdown.bs.js";

function s(prim) {
  return prim;
}

function make(id, word) {
  return {
          id: id,
          full_name: word
        };
}

function id(t) {
  return t.id;
}

function name(t) {
  return t.full_name;
}

var Record = {
  make: make,
  id: id,
  name: name
};

function label(_t) {
  
}

function id$1(t) {
  return t._0;
}

function value(t) {
  return t._1;
}

var searchString = value;

function color(_t) {
  return "gray";
}

function makeVolunteer(id, name) {
  return /* Volunteer */{
          _0: id,
          _1: name
        };
}

var Selectable = {
  label: label,
  id: id$1,
  value: value,
  searchString: searchString,
  color: color,
  makeVolunteer: makeVolunteer
};

var Multiselect = MultiselectDropdown$Arike.Make({
      label: label,
      value: value,
      searchString: searchString,
      color: color
    });

function getJsonFromHtml(dataElem) {
  var elem = Belt_Option.getWithDefault(document.getElementById(dataElem), {});
  return Belt_Array.map(JSON.parse(elem.innerText.replaceAll("&quot;", "\"")), (function (optionsInfo) {
                return /* Volunteer */{
                        _0: optionsInfo.id,
                        _1: optionsInfo.full_name
                      };
              }));
}

function Multiselect$1(Props) {
  var name = Props.name;
  var id$2 = Props.id;
  var label = Props.label;
  var placeholder = Props.placeholder;
  var dataElem = Props.dataElem;
  var match = React.useState(function () {
        return {
                selected: [],
                searchString: ""
              };
      });
  var setState = match[1];
  var state = match[0];
  var match$1 = React.useState(function () {
        return getJsonFromHtml(dataElem);
      });
  var setUnselected = match$1[1];
  var unselected = match$1[0];
  React.useEffect((function () {
          var newArray = unselected.filter(function (tmp) {
                var optionElement = state.selected.find(function (elem) {
                      return id$1(elem) === id$1(tmp);
                    });
                return Belt_Option.isNone(optionElement === undefined ? undefined : Caml_option.some(optionElement));
              });
          Curry._1(setUnselected, (function (param) {
                  return newArray;
                }));
          
        }), [state]);
  var partial_arg = state.selected;
  return React.createElement("div", undefined, React.createElement("div", undefined, React.createElement("label", {
                      className: "block text-sm font-medium text-gray-700",
                      htmlFor: "MultiselectDropdown__search-input"
                    }, label)), React.createElement(Multiselect.make, {
                  id: id$2,
                  name: name,
                  onChange: (function (searchString) {
                      return Curry._1(setState, (function (s) {
                                    return {
                                            selected: s.selected,
                                            searchString: searchString
                                          };
                                  }));
                    }),
                  value: state.searchString,
                  unselected: unselected,
                  selected: state.selected,
                  onSelect: (function (selectable) {
                      return Curry._1(setState, (function (s) {
                                    return {
                                            selected: $$Array.append(s.selected, [selectable]),
                                            searchString: ""
                                          };
                                  }));
                    }),
                  onDeselect: (function (param) {
                      Curry._1(setUnselected, (function (pv) {
                              return Belt_Array.concat(pv, [param]);
                            }));
                      var newSelected = partial_arg.filter(function (s) {
                            return Caml_obj.caml_notequal(s, param);
                          });
                      return Curry._1(setState, (function (param) {
                                    return {
                                            selected: newSelected,
                                            searchString: ""
                                          };
                                  }));
                    }),
                  hint: placeholder,
                  defaultOptions: unselected
                }));
}

var make$1 = Multiselect$1;

export {
  s ,
  Record ,
  Selectable ,
  Multiselect ,
  getJsonFromHtml ,
  make$1 as make,
  
}
/* Multiselect Not a pure module */
